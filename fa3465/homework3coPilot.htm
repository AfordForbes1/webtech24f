<!DOCTYPE html>
<html lang="en"> 
  <head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" /> 
    <title>Homework 3 - processing forms</title>
    <style>
      form {background-color:silver; font-family:Arial; color:Navy;
      padding-left:50px; padding-top:20px; padding-bottom:20px;
      margin-right:auto; margin-left:auto; width:60%;}
      .but {width:200px; height:60px; background-color:magenta; color:black;}
      p#desc {margin:50px 200px; font-family:cursive; }
      h3 {font-family:lucida handwriting; font-size:3em; text-align:center;}
    </style>
    <script>
      function validateForm() {
        const productInput = document.forms[0].product.value.trim().toLowerCase();
        const quantityInput = document.forms[0].quantity.value.trim();
        const amountDueInput = document.forms[0].AmtDue;
        
        const products = {
          milk: 3.50,
          apple: 0.99,
          fish: 5.99
        };
        
        if (!productInput || !products.hasOwnProperty(productInput)) {
          alert("Please enter a valid product: Milk, Apple, or Fish.");
          return false;
        }
        
        if (!quantityInput || isNaN(quantityInput) || quantityInput < 0) {
          alert("Please enter a valid numeric quantity.");
          return false;
        }
        
        const quantity = parseFloat(quantityInput);
        const cost = products[productInput];
        const amountDue = (cost * quantity).toFixed(2);
        
        amountDueInput.value = `$${amountDue}`;
        return false; // Prevent form submission for demonstration
      }
    </script>
  </head>
  <body>
    <h3> Homework 3</h3>
    <p id="desc">
      The form given below has 3 fields. Let us assume that the user will type in
      the name of one of 3 products: Milk, Apple, or Fish. The user may enter these 
      using any mix of cases, so be aware. You need to check to ensure that the user
      enters a value. If it is not one of these 3, let the user know. 
      Then the user will enter a quantity. You need to check to ensure that a quantity is entered 
      (you may assume that 0 is a valid quality) and that the value is numeric. 
      Once validated, use the following costs - 1 bottle of milk is $3.50; one 
      apple is $0.99 and one pound of fish is $5.99 - and show the amount owed
      in the third field. All of this should be done when the appropriate 
      button is pressed. The amount must be shown with 2 decimal places and prefixed with
      a $ (dollar) sign.     
    </p>
    <form onsubmit="return validateForm()">
      <p>
        <input type="text" name="product" size="20" placeholder="Enter product..."/>
            
        <input type="text" name="quantity" size="20" placeholder="Enter quantity.."/>
      </p>
      <p>
        <input type="text" name="AmtDue" size="20" placeholder="show amount due"/>
      </p>
      <p>
        <input class="but" type="submit" name="submit" value="What Do I Owe"/>
            
        <input class="but" type="reset" name="reset" value="Clear All"/>  
      </p>
    </form>
	<h2>CO-PILOT reflection</h2>
	<p>Prompt:Look at this file with code and follow the instructions that is stated in the file... please provide me with the code</p>
	<p>
		My code and Copilot’s generated version are very similar in structure, validation, and styling.<br>
		Both versions use sequential `if-else` statements to validate the `product` and `quantity` inputs,<br>
		ensuring users receive clear guidance at each step. Each code converts the `product` input to lowercase <br>
		with `toLowerCase()`, making it case-insensitive. Both versions calculate `amountDue` by checking the product, <br>
		setting the correct price, and formatting the result to two decimal places. Both codes use `event.preventDefault()`<br>
		to prevent the form from reloading, allowing results to appear instantly.<br>
		
		However, there are a few small differences. While both codes include instructions, my version is phrased with more <br>
		personalized guidance, which may help users better understand each field. There are also minor formatting differences,<br>
		like whitespace and indentation, which can affect readability. Copilot’s alert messages have slight wording<br>
		variations compared to mine, as it interprets instructions in its own style. Overall, Copilot’s version closely aligns<br> 
		with my code, showing its ability to follow detailed instructions accurately, though small tweaks are needed for my<br>
		personal touch.</p>
  </body>
</html>
